import {
  _extends
} from "./chunk-KBUAZBQ3.js";
import {
  EditorView,
  HighlightStyle,
  syntaxHighlighting,
  tags
} from "./chunk-BGPA25TS.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@uiw/codemirror-themes/esm/index.js
var createTheme = (_ref) => {
  var {
    theme,
    settings = {},
    styles = []
  } = _ref;
  var themeOptions = {
    ".cm-gutters": {}
  };
  var baseStyle = {};
  if (settings.background) {
    baseStyle.backgroundColor = settings.background;
  }
  if (settings.backgroundImage) {
    baseStyle.backgroundImage = settings.backgroundImage;
  }
  if (settings.foreground) {
    baseStyle.color = settings.foreground;
  }
  if (settings.fontSize) {
    baseStyle.fontSize = settings.fontSize;
  }
  if (settings.background || settings.foreground) {
    themeOptions["&"] = baseStyle;
  }
  if (settings.fontFamily) {
    themeOptions["&.cm-editor .cm-scroller"] = {
      fontFamily: settings.fontFamily
    };
  }
  if (settings.gutterBackground) {
    themeOptions[".cm-gutters"].backgroundColor = settings.gutterBackground;
  }
  if (settings.gutterForeground) {
    themeOptions[".cm-gutters"].color = settings.gutterForeground;
  }
  if (settings.gutterBorder) {
    themeOptions[".cm-gutters"].borderRightColor = settings.gutterBorder;
  }
  if (settings.caret) {
    themeOptions[".cm-content"] = {
      caretColor: settings.caret
    };
    themeOptions[".cm-cursor, .cm-dropCursor"] = {
      borderLeftColor: settings.caret
    };
  }
  var activeLineGutterStyle = {};
  if (settings.gutterActiveForeground) {
    activeLineGutterStyle.color = settings.gutterActiveForeground;
  }
  if (settings.lineHighlight) {
    themeOptions[".cm-activeLine"] = {
      backgroundColor: settings.lineHighlight
    };
    activeLineGutterStyle.backgroundColor = settings.lineHighlight;
  }
  themeOptions[".cm-activeLineGutter"] = activeLineGutterStyle;
  if (settings.selection) {
    themeOptions["&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection"] = {
      background: settings.selection + " !important"
    };
  }
  if (settings.selectionMatch) {
    themeOptions["& .cm-selectionMatch"] = {
      backgroundColor: settings.selectionMatch
    };
  }
  var themeExtension = EditorView.theme(themeOptions, {
    dark: theme === "dark"
  });
  var highlightStyle = HighlightStyle.define(styles);
  var extension = [themeExtension, syntaxHighlighting(highlightStyle)];
  return extension;
};

// node_modules/@uiw/codemirror-theme-tokyo-night/esm/index.js
var defaultSettingsTokyoNight = {
  background: "#1a1b26",
  foreground: "#787c99",
  caret: "#c0caf5",
  selection: "#515c7e40",
  selectionMatch: "#16161e",
  gutterBackground: "#1a1b26",
  gutterForeground: "#787c99",
  gutterBorder: "transparent",
  lineHighlight: "#474b6611"
};
var tokyoNightInit = (options) => {
  var {
    theme = "dark",
    settings = {},
    styles = []
  } = options || {};
  return createTheme({
    theme,
    settings: _extends({}, defaultSettingsTokyoNight, settings),
    styles: [{
      tag: tags.keyword,
      color: "#bb9af7"
    }, {
      tag: [tags.name, tags.deleted, tags.character, tags.macroName],
      color: "#c0caf5"
    }, {
      tag: [tags.propertyName],
      color: "#7aa2f7"
    }, {
      tag: [tags.processingInstruction, tags.string, tags.inserted, tags.special(tags.string)],
      color: "#9ece6a"
    }, {
      tag: [tags.function(tags.variableName), tags.labelName],
      color: "#7aa2f7"
    }, {
      tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
      color: "#bb9af7"
    }, {
      tag: [tags.definition(tags.name), tags.separator],
      color: "#c0caf5"
    }, {
      tag: [tags.className],
      color: "#c0caf5"
    }, {
      tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
      color: "#ff9e64"
    }, {
      tag: [tags.typeName],
      color: "#0db9d7"
    }, {
      tag: [tags.operator, tags.operatorKeyword],
      color: "#bb9af7"
    }, {
      tag: [tags.url, tags.escape, tags.regexp, tags.link],
      color: "#b4f9f8"
    }, {
      tag: [tags.meta, tags.comment],
      color: "#444b6a"
    }, {
      tag: tags.strong,
      fontWeight: "bold"
    }, {
      tag: tags.emphasis,
      fontStyle: "italic"
    }, {
      tag: tags.link,
      textDecoration: "underline"
    }, {
      tag: tags.heading,
      fontWeight: "bold",
      color: "#89ddff"
    }, {
      tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
      color: "#c0caf5"
    }, {
      tag: tags.invalid,
      color: "#ff5370"
    }, {
      tag: tags.strikethrough,
      textDecoration: "line-through"
    }, ...styles]
  });
};
var tokyoNight = tokyoNightInit();
export {
  defaultSettingsTokyoNight,
  tokyoNight,
  tokyoNightInit
};
//# sourceMappingURL=@uiw_codemirror-theme-tokyo-night.js.map
